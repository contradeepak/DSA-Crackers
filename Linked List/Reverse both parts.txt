Given a linked list and a number k. You have to reverse the first part of the linked list with k nodes and the second part with n-k nodes.

Examples:

Input: Linked list: 1 -> 2 -> 3 -> 4 -> 5,  k = 2
Output: 2 -> 1 -> 5 -> 4 -> 3

Explanation: As k = 2 , so the first part 2 nodes: 1 -> 2 and the second part with 3 nodes: 3 -> 4 -> 5. Now after reversing the first part: 2 -> 1 and the second part: 5 -> 4 -> 3. So the output is: 2 -> 1 -> 5 -> 4 -> 3
Input: Linked list: 1 -> 2 -> 4 -> 3,  k = 3
Output: 4 -> 2 -> 1 -> 3

Explanation: As k = 3 , so the first part 3 nodes: 4 -> 2 -> 1 and the second part with 1 nodes: 3. Now after reversing the first part: 1 -> 2 -> 4 and the second part: 3. So the output is: 1 -> 2 -> 4 -> 3



Solution :



class Solution {
  public:
    Node *reverse(Node *head, int k) {
        // code here
        
    {
        //Code for reversing the list and counting the number of nodes into a variable count
        
        Node* curr=head;
        Node* prev=NULL;
        int count=0;
        while(curr!=NULL){
            Node *next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
            count++;
        }
        // Important thing to note that now the starting of the list has prev as the main pointer andnot the head
        
        Node *temp=prev;
        int i=count-k-1;
        while(i--){
            temp=temp->next;
        }
        
        head->next=prev;
        
        //Now connect the last of the list to the front
        
        Node *ans=temp->next;
        temp->next=NULL;
        
        //Breaking at the node-k point
        return ans;
        
    }
        
        
        
        
    }