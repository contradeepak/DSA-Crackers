Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]



Solution :

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head || !head->next || k==0)
      return head;

        int len=1;
        ListNode* temp = head;
        while(temp->next){
            len++;
            temp=temp->next;
        }

        if(k %len == 0) return head;
        k=k%len;
        int p = len -k;
        temp->next=head;
        ListNode* lastnode = head;
        while(--p) lastnode = lastnode->next;
        ListNode* newhead = lastnode->next;
        lastnode->next = NULL;
        return newhead;
    }
};